import logging
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
from dashscope import Generation
import dashscope

# === –í–ê–ñ–ù–û: –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–∏ —Ç–æ–∫–µ–Ω—ã ===
TELEGRAM_BOT_TOKEN = '7581031642:AAGe4Msn9E96TtydoL6yPG0p53Vpsml2N4A'  # <-- –ó–î–ï–°–¨ –≤—Å—Ç–∞–≤—å —Å–≤–æ–π Telegram Bot Token
DASHSCOPE_API_KEY = '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'

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–ª—é—á–∞ –¥–ª—è DashScope
dashscope.api_key = DASHSCOPE_API_KEY

# === –õ–æ–≥–∏–∫–∞ Qwen3 —Å –≤—ã–≤–æ–¥–æ–º –ø–æ–ª–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ ===
async def ask_qwen(prompt: str) -> str:
    try:
        response = Generation.call(
            model="qwen-turbo",  # –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å qwen-plus –∏–ª–∏ qwen-max
            prompt=prompt
        )

        print("üìä –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Qwen:", response)  # –û—Ç–ª–∞–¥–∫–∞: –ø–æ—Å–º–æ—Ç—Ä–∏ —ç—Ç–æ –≤ –∫–æ–Ω—Å–æ–ª–∏

        if hasattr(response, 'output') and hasattr(response.output, 'text'):
            return response.output.text.strip()
        else:
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏. –ü—Ä–æ–≤–µ—Ä—å –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –¥–µ—Ç–∞–ª–µ–π."
    except Exception as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Qwen3: {e}"

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await context.bot.send_message(chat_id=update.effective_chat.id,
                                   text="–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ Qwen3. –ó–∞–¥–∞–≤–∞–π —Å–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã!")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text
    reply = await ask_qwen(user_input)
    await update.message.reply_text(reply)

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
if __name__ == '__main__':
    logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

    application = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()

    start_handler = CommandHandler('start', start)
    message_handler = MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message)

    application.add_handler(start_handler)
    application.add_handler(message_handler)

    print("üöÄ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω! –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
    application.run_polling()
# === –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ ===
if __name__ == '__main__':
    # –í–∫–ª—é—á–µ–Ω–∏–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

    application = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()

    start_handler = CommandHandler('start', start)
    message_handler = MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message)

    application.add_handler(start_handler)
    application.add_handler(message_handler)

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
    application.run_polling()