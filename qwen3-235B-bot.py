import asyncio
import logging
import json
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import aiohttp
from aiogram import F
from dotenv import load_dotenv
import os

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()

# === –¢–æ–∫–µ–Ω—ã –∏ –º–æ–¥–µ–ª–∏ ===
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")

SUPPORTED_MODELS = {
    "qwen": "qwen/qwen3-30b-a3b:free",
    "gemini": "google/gemini-flash-1.5"
}

# === –•—Ä–∞–Ω–∏–ª–∏—â–µ –º–æ–¥–µ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ===
user_models = {}

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ===
bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher()


# === –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ===
def get_menu_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üß† –û –º–æ–¥–µ–ª—è—Ö")],
            [KeyboardButton(text="üîÑ –°–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å")]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )


def get_model_selection_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚ö°Ô∏è Qwen")],
            [KeyboardButton(text="‚ú® Gemini")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )


# === –°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ ===
@dp.message(CommandStart())
async def send_welcome(message: types.Message):
    user_id = message.from_user.id
    user_models[user_id] = user_models.get(user_id, "qwen")
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=get_menu_keyboard())
    await update_menu(message)


async def update_menu(message: types.Message):
    # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –±–µ–∑ –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        # –ü–æ–ø—Ä–æ–±—É–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await bot.edit_message_reply_markup(
            chat_id=message.chat.id,
            message_id=message.message_id - 1,  # –ü—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            reply_markup=get_menu_keyboard()
        )
    except Exception as e:
        # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å ‚Äî –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∏–ª–∏ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        pass

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û –º–æ–¥–µ–ª—è—Ö" ===
@dp.message(F.text == "üß† –û –º–æ–¥–µ–ª—è—Ö")
async def about_models(message: types.Message):
    text = (
        "ü§ñ *–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:*\n\n"
        "‚ö°Ô∏è *Qwen 30B-A3B* ‚Äî –º–æ—â–Ω–∞—è, —Ç–æ—á–Ω–∞—è, –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å.\n"
        "‚ú® *Gemini 1.5 flash* ‚Äî –±—ã—Å—Ç—Ä–∞—è, –¥–ª—è –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞—á."
    )
    await message.reply(text, parse_mode="Markdown")


# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–°–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å" ===
@dp.message(F.text == "üîÑ –°–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å")
async def change_model_button(message: types.Message):
    keyboard = get_model_selection_keyboard()
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å:", reply_markup=keyboard)


@dp.message(F.text.in_(["‚ö°Ô∏è Qwen", "‚ú® Gemini"]))
async def handle_model_choice(message: types.Message):
    user_id = message.from_user.id
    if "Qwen" in message.text:
        user_models[user_id] = "qwen"
        await message.reply("‚úÖ –ú–æ–¥–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ *Qwen*", parse_mode="Markdown")
    else:
        user_models[user_id] = "gemini"
        await message.reply("‚úÖ –ú–æ–¥–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ *Gemini*", parse_mode="Markdown")
    await update_menu(message)


# === –í—ã–∑–æ–≤ LLM —á–µ—Ä–µ–∑ OpenRouter ===
async def invoke_llm_api(user_content: str, model_key: str) -> str:
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json",
        "HTTP-Referer": "https://my-telegram-bot.com",
        "X-Title": "Qwen3 + Gemini Bot"
    }

    body = {
        "model": SUPPORTED_MODELS[model_key],
        "messages": [
            {"role": "system", "content": "–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ, –∫–∞–∫ –≤ —á–∞—Ç–µ."},
            {"role": "user", "content": user_content}
        ],
        "stream": True,
        "max_tokens": 1024,
        "temperature": 0.7
    }

    full_response = ""

    try:
        async with aiohttp.ClientSession() as session:
            async with session.post("https://openrouter.ai/api/v1/chat/completions",  headers=headers, json=body) as response:
                if response.status != 200:
                    return f"–û—à–∏–±–∫–∞ API: HTTP {response.status}"
                async for line in response.content:
                    line = line.decode("utf-8").strip()
                    if line.startswith("data: "):
                        data = line[6:]
                        if data == "[DONE]":
                            break
                        try:
                            chunk = json.loads(data)
                            if chunk.get("choices") and chunk["choices"][0].get("delta"):
                                content = chunk["choices"][0]["delta"].get("content")
                                if content:
                                    full_response += content
                        except Exception as e:
                            print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–∞–Ω–∫–∞: {e}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ API: {e}")
        return f"–û—à–∏–±–∫–∞: {e}"

    return full_response.strip()


# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ===
@dp.message()
async def handle_message(message: types.Message):
    user_id = message.from_user.id
    model_key = user_models.get(user_id, "qwen")

    processing_msg = await message.reply("üß† –î—É–º–∞—é...")

    response = await invoke_llm_api(message.text, model_key)

    await bot.delete_message(chat_id=processing_msg.chat.id, message_id=processing_msg.message_id)

    if response:
        for i in range(0, len(response), 4096):
            await message.reply(response[i:i + 4096])
    else:
        await message.reply("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏.")


# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
async def main():
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())